name: Claude Code Improvement

on:
  schedule:
    # Run every 6 hours
    - cron: "0 */6 * * *"
  workflow_dispatch:
    # Allow manual triggering

jobs:
  code-improvement:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: write
      id-token: write
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24"

      - name: Cache pip
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          python -m venv .venv && \
          . .venv/bin/activate && \
          pip install --editable .

      - name: Write to .env file
        run: |
          echo "SECRET_KEY=test-secret" >> .env
          echo "DJANGO_SUPERUSER_PASSWORD=password" >> .env

      - name: Install Node dependencies
        run: npm ci

      - name: Run Claude Code Improvement Analysis
        id: claude-improvement
        uses: anthropics/claude-code-action@beta
        env:
          ALLOWED_TOOLS: "Edit,View,Replace,Write,Create,BatchTool,GlobTool,GrepTool,NotebookEditCell,Bash,mcp__*"
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Use Claude Opus for thorough analysis
          model: "claude-opus-4-20250514"
          mode: "agent"

          # Allow Claude to use necessary tools
          allowed_tools: "Edit,View,Replace,Write,Create,BatchTool,GlobTool,GrepTool,NotebookEditCell,Bash,mcp__*"

          # Direct prompt for automated code improvement
          direct_prompt: |
            You are performing an automated code improvement analysis on the Gyrinx repository.

            Your task is to:

            1. **Random File Selection Strategy**:
               - List all Python, JavaScript, CSS/SCSS, and HTML template files in the repository
               - EXCLUDE any files in migrations folders
               - Randomly select ONE file as your starting point
               - From that file, work outwards to understand the broader subsystem it belongs to
               - Trace its imports, dependencies, and relationships to related files
               - Build a complete picture of the feature/subsystem this file is part of

            2. **Create a full description** of the discovered subsystem including:
               - The starting file and why it was selected
               - Its primary functionality and purpose
               - Related files discovered through analysis
               - Interfaces (APIs, templates, models) it uses or provides
               - Dependencies and interactions with other parts
               - Current test coverage for this subsystem

            3. **Systematically analyze against the checklist** in .github/code-improvement-checklist.md:
               - ALL sections of the checklist should be considered
               - Document your confidence level for each issue found (Low/Medium/High)

            4. **Review documentation**:
               - Check if the subsystem is documented in the README or docs folder
               - Identify any gaps in documentation that need to be addressed

            5. **Filter issues** to ONLY HIGH CONFIDENCE problems:
               - Only report issues you are highly confident are real problems
               - Each issue must be actionable and provide clear value
               - Maximum of 3 issues per run

            6. **Create GitHub issues** with a clear, specific title describing the problem. Use this template for each issue:

               [Detailed explanation of the issue and why it matters]

               ## Examples

               [Provide specific examples of the issue in the code]

               ```language
               [Show the problematic code with file paths and line numbers]
               ```

               ## Suggested Improvement
               [Specific, actionable suggestions for fixing the issue]

               ## Impact
               - **Area**: Which subsystem/feature is affected
               - **Severity**: Low/Medium/High
               - **Effort**: Small/Medium/Large
               - **Confidence**: Low/Medium/High

               ## Files Affected
               - [List all files that would need changes]

               ## Additional Context
               [Any additional context that would help understand the issue]

               ## Analysis Path
               [Explain how this issue was discovered through the analysis path from the random file to the broader subsystem]

               ---
               *This issue was automatically generated by Claude Code Improvement workflow*

            7. **Label the issues**:
               - Apply the label "claude-generated" to all created issues
               - Apply the following labels as appropriate: security, performance, quality, documentation

            IMPORTANT REQUIREMENTS:
            - Apply the label "claude-generated" to all created issues
            - Maximum 3 issues per run (choose the most impactful high-confidence ones)
            - Only create new issues - do not comment on existing PRs or issues
            - Report issues only - do not attempt to fix them
            - Use proper randomness for file selection (don't favor certain directories)
            - Clearly show the analysis path from the random file to the broader subsystem

            Start by listing files and selecting one randomly, then proceed with the analysis.

          # Custom instructions for the project
          custom_instructions: |
            The repo is gyrinx-app/gyrinx.

            You can create issues using the `gh` CLI tool:
            ```bash
            gh issue create --repo gyrinx-app/gyrinx [ARGS]
            ```

            Focus on the following areas:
            - Use the checklist at .github/code-improvement-checklist.md
            - Review the patterns documented in CLAUDE.md
