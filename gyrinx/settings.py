"""
Django settings for gyrinx project.

This should contain safe defaults for production. The development settings
should be in a separate file.

Originally generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import json
import logging
import os
from pathlib import Path

from dotenv import load_dotenv

load_dotenv()

logger = logging.getLogger(__name__)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY
SECRET_KEY = os.getenv("SECRET_KEY")
CSRF_COOKIE_SECURE = True
CSRF_FAILURE_VIEW = "gyrinx.core.views.csrf_failure"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

try:
    ALLOWED_HOSTS = json.loads(os.getenv("ALLOWED_HOSTS", "[]"))
except Exception as e:
    logger.error(f"Error parsing ALLOWED_HOSTS: {e}")
    ALLOWED_HOSTS = []

INTERNAL_IPS = [
    "127.0.0.1",
]

try:
    CSRF_TRUSTED_ORIGINS = json.loads(os.getenv("CSRF_TRUSTED_ORIGINS", "[]"))
except Exception as e:
    logger.error(f"Error parsing CSRF_TRUSTED_ORIGINS: {e}")
    CSRF_TRUSTED_ORIGINS = []

CSRF_COOKIE_DOMAIN = os.environ.get("CSRF_COOKIE_DOMAIN", None)

logger.info(f"ALLOWED_HOSTS: {ALLOWED_HOSTS}")
logger.info(f"CSRF_TRUSTED_ORIGINS: {CSRF_TRUSTED_ORIGINS}")
logger.info(f"CSRF_COOKIE_DOMAIN: {CSRF_COOKIE_DOMAIN}")

# Email
# Use SMTP
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
DEFAULT_FROM_EMAIL = "hello@gyrinx.app"

# Extra email headers (JSON string)
# Example: '{"X-Auto-Response-Suppress": "OOF, DR, RN, NRN, AutoReply", "List-Unsubscribe": "<mailto:unsubscribe@gyrinx.app>"}'
EMAIL_EXTRA_HEADERS = os.getenv("EMAIL_EXTRA_HEADERS", "{}")

# Analytics

GOOGLE_ANALYTICS_ID = os.getenv("GOOGLE_ANALYTICS_ID", "")

# Patreon

PATREON_HOOK_SECRET = os.getenv("PATREON_HOOK_SECRET", "")

# Application definition

INSTALLED_APPS = [
    "daphne",
    # Added so we can override templates
    "django.forms",
    "django.contrib.admin",
    "django.contrib.auth",
    "polymorphic",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.postgres",
    "django.contrib.admindocs",
    "django.contrib.sites",
    "django.contrib.flatpages",
    "django.contrib.humanize",
    "debug_toolbar",
    "django_extensions",
    # Django allauth
    "allauth",
    "allauth.account",
    "allauth.usersessions",  # Required for MFA
    "allauth.mfa",  # Multi-factor authentication
    # reCAPTCHA
    "django_recaptcha",
    # simplehistory
    "simple_history",
    # Disable Django's static file handling in favour of WhiteNoise in dev
    "whitenoise.runserver_nostatic",
    "django.contrib.staticfiles",
    "gyrinx.core",
    "gyrinx.content",
    "gyrinx.analytics",
    "gyrinx.pages",
    "gyrinx.api",
    "tinymce",
    "storages",
    # "csp"
]

MIDDLEWARE = [
    "google.cloud.sqlcommenter.django.middleware.SqlCommenter",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    # Django allauth
    "allauth.account.middleware.AccountMiddleware",
    "allauth.usersessions.middleware.UserSessionsMiddleware",
    # simplehistory
    "simple_history.middleware.HistoryRequestMiddleware",
    # CSP
    # "csp.middleware.CSPMiddleware",
]

ROOT_URLCONF = "gyrinx.urls"

FORM_RENDERER = "django.forms.renderers.TemplatesSetting"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            # Include the root templates directory where we
            # can override templates from django across all apps
            BASE_DIR / "gyrinx/templates",
            BASE_DIR / "gyrinx/core/templates",
            BASE_DIR / "gyrinx/pages/templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "gyrinx.core.context_processors.site_banner",
            ],
        },
    },
]

WSGI_APPLICATION = "gyrinx.wsgi.application"
ASGI_APPLICATION = "gyrinx.asgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

try:
    DB_CONFIG = json.loads(os.getenv("DB_CONFIG", "{}"))
except json.JSONDecodeError as e:
    logger.error(f"Error parsing DB_CONFIG: {e}")

if not DB_CONFIG.get("user"):
    logger.error("DB_CONFIG is missing 'user' key")
if not DB_CONFIG.get("password"):
    logger.error("DB_CONFIG is missing 'password' key")


DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME", "gyrinx"),
        "USER": DB_CONFIG.get("user", "postgres"),
        "PASSWORD": DB_CONFIG.get("password", "postgres"),
        "HOST": os.getenv("DB_HOST", "localhost"),
        "PORT": os.getenv("DB_PORT", "5432"),
    }
}

# Caching
# https://docs.djangoproject.com/en/5.1/topics/cache/

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "unique-snowflake",
    },
    "content_page_ref_cache": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "content-page-ref-cache",
    },
    "core_list_cache": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "core-list-cache",
    },
}

CACHE_LIST_TTL = os.getenv("CACHE_LIST_TTL", 60 * 5)

# Authentication
# Using django-allauth for authentication
# https://django-allauth.readthedocs.io/en/latest/installation.html

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

LOGIN_REDIRECT_URL = "/"

# Allauth settings
# https://django-allauth.readthedocs.io/en/latest/configuration.html

ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 3
ACCOUNT_EMAIL_SUBJECT_PREFIX = "[Gyrinx] "
ACCOUNT_SIGNUP_FIELDS = ["email*", "username*", "password1*", "password2*"]
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_USERNAME_BLACKLIST = ["admin", "superuser", "staff", "user", "gyrinx"]
ACCOUNT_CHANGE_EMAIL = True
ACCOUNT_EMAIL_UNKNOWN_ACCOUNTS = False
ACCOUNT_ADAPTER = "gyrinx.core.adapter.CustomAccountAdapter"
ACCOUNT_FORMS = {
    "reset_password": "gyrinx.core.forms.ResetPasswordForm",
    "login": "gyrinx.core.forms.LoginForm",
    "signup": "gyrinx.core.forms.SignupForm",
}
# Custom setting to (dis)allow signups
ACCOUNT_ALLOW_SIGNUPS = os.getenv("ACCOUNT_ALLOW_SIGNUPS", "True") == "True"
USERSESSIONS_TRACK_ACTIVITY = True

# MFA (Multi-Factor Authentication) settings
# https://docs.allauth.org/en/latest/mfa/introduction.html
MFA_TOTP_ISSUER = "Gyrinx"  # This will appear in the authenticator app
MFA_SUPPORTED_TYPES = ["totp"]  # Only support TOTP, not SMS or recovery codes initially


# Beta badge
SHOW_BETA_BADGE = os.getenv("SHOW_BETA_BADGE", "True") == "True"

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# reCAPTCHA

RECAPTCHA_PUBLIC_KEY = os.getenv("RECAPTCHA_PUBLIC_KEY", "")
RECAPTCHA_PRIVATE_KEY = os.getenv("RECAPTCHA_PRIVATE_KEY", "")
try:
    RECAPTCHA_REQUIRED_SCORE = float(os.getenv("RECAPTCHA_REQUIRED_SCORE", 0.5))
except ValueError:
    logger.exception("Error parsing RECAPTCHA_REQUIRED_SCORE")
    RECAPTCHA_REQUIRED_SCORE = 0.5

# Storages

STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

# Logging
# https://docs.djangoproject.com/en/5.1/topics/logging/

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "null": {
            "class": "logging.NullHandler",
        },
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "django.security.DisallowedHost": {
            "handlers": ["null"],
            "propagate": False,
        },
        "django.request": {
            "handlers": ["console"],
            "level": "ERROR",
            "propagate": False,
        },
        "gyrinx": {
            "handlers": ["console"],
            "level": os.getenv("GYRINX_LOG_LEVEL", "INFO").upper(),
            "propagate": True,
        },
    },
    "root": {
        "handlers": ["console"],
        "level": os.getenv("GYRINX_LOG_LEVEL", "INFO").upper(),
    },
}

# Sites

SITE_ID = 1

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
WHITENOISE_ROOT = BASE_DIR / "static"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Content Security Policy (CSP) Configuration
# https://django-csp.readthedocs.io/

# Note! Disabled
DISABLED_CONTENT_SECURITY_POLICY = {
    "DIRECTIVES": {
        "default-src": ["'self'"],
        "script-src": [
            "'self'",
            "'unsafe-inline'",  # Required for TinyMCE and inline scripts
            "https://cdn.jsdelivr.net",  # Bootstrap JS and iframe-resizer
            "https://www.googletagmanager.com",  # Google Tag Manager
            "https://www.google-analytics.com",  # Google Analytics
            "https://cdn-cookieyes.com",  # CookieYes consent management
            "https://www.google.com",  # Google reCAPTCHA
            "https://www.gstatic.com",  # Google reCAPTCHA static resources
        ],
        "style-src": [
            "'self'",
            "'unsafe-inline'",  # Required for TinyMCE and inline styles
            "https://cdn.jsdelivr.net",  # Bootstrap Icons CSS
            "https://cdn-cookieyes.com",  # CookieYes consent management styles
        ],
        "font-src": [
            "'self'",
            "https://cdn.jsdelivr.net",  # Bootstrap Icons fonts
        ],
        "img-src": [
            "'self'",
            "data:",  # Data URLs for inline images
            "https://www.google-analytics.com",  # Google Analytics pixel
            "https://www.googletagmanager.com",  # Google Tag Manager
            "https://cdn-cookieyes.com",  # CookieYes consent management images
        ],
        "connect-src": [
            "'self'",
            "https://www.google-analytics.com",  # Google Analytics
            "https://www.googletagmanager.com",  # Google Tag Manager
            "https://cdn-cookieyes.com",  # CookieYes consent management API
            "https://log.cookieyes.com",  # CookieYes logging API
        ],
        "frame-src": [
            "'self'",
            "https://www.googletagmanager.com",  # Google Tag Manager iframe
        ],
        "form-action": ["'self'"],
        "base-uri": ["'self'"],
        "frame-ancestors": ["*"],  # Allow embedding from any domain
        "object-src": ["'none'"],
        "media-src": ["'self'"],
        "worker-src": ["'self'"],
        "manifest-src": ["'self'"],
        "upgrade-insecure-requests": True,
        "block-all-mixed-content": True,
    }
}

# SqlCommenter configuration
SQLCOMMENTER_WITH_CONTROLLER = True
SQLCOMMENTER_WITH_FRAMEWORK = True
SQLCOMMENTER_WITH_ROUTE = True
SQLCOMMENTER_WITH_APP_NAME = True
