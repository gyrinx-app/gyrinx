# Generated by Django 5.1.3 on 2025-01-09 14:33

from django.db import migrations


def ensure_contentstat_entries(apps, schema_editor):
    """
    Ensures ContentStat entries exist for all stats referenced in ContentModStatApplyMixin
    with the correct boolean flags set.
    """
    ContentStat = apps.get_model("content", "ContentStat")

    # Define the stat configurations based on ContentModStatApplyMixin
    inverted_stats = {
        "ammo",
        "armour_piercing",
        "weapon_skill",
        "ballistic_skill",
        "intelligence",
        "leadership",
        "cool",
        "willpower",
        "initiative",
        "handling",
        "save",
    }

    inch_stats = {"range_short", "range_long", "movement"}

    modifier_stats = {"accuracy_short", "accuracy_long", "armour_piercing"}

    target_roll_stats = {
        "ammo",
        "weapon_skill",
        "ballistic_skill",
        "intelligence",
        "leadership",
        "cool",
        "willpower",
        "initiative",
        "handling",
        "save",
    }

    # Collect all unique stat names
    all_stats = inverted_stats | inch_stats | modifier_stats | target_roll_stats

    # Define display names for stats (field_name -> (short_name, full_name))
    stat_display_names = {
        # Combat stats
        "ammo": ("Am", "Ammo"),
        "armour_piercing": ("AP", "Armour Piercing"),
        "weapon_skill": ("WS", "Weapon Skill"),
        "ballistic_skill": ("BS", "Ballistic Skill"),
        # Mental stats
        "intelligence": ("Int", "Intelligence"),
        "leadership": ("Ld", "Leadership"),
        "cool": ("Cl", "Cool"),
        "willpower": ("Wil", "Willpower"),
        # Physical stats
        "initiative": ("I", "Initiative"),
        "handling": ("Hnd", "Handling"),
        "save": ("Sv", "Save"),
        "movement": ("M", "Movement"),
        # Weapon stats
        "range_short": ("S", "Short Range"),
        "range_long": ("L", "Long Range"),
        "accuracy_short": ("S", "Short Accuracy"),
        "accuracy_long": ("L", "Long Accuracy"),
    }

    # Process each stat
    for stat_name in sorted(all_stats):
        # Get display names or generate defaults
        if stat_name in stat_display_names:
            short_name, full_name = stat_display_names[stat_name]
        else:
            # Generate defaults based on field name
            short_name = stat_name.replace("_", " ").title()[:10]
            full_name = stat_name.replace("_", " ").title()

        # Determine flags
        is_inverted = stat_name in inverted_stats
        is_inches = stat_name in inch_stats
        is_modifier = stat_name in modifier_stats
        is_target = stat_name in target_roll_stats

        # Get or create the ContentStat
        content_stat, created = ContentStat.objects.get_or_create(
            field_name=stat_name,
            defaults={
                "short_name": short_name,
                "full_name": full_name,
                "is_inverted": is_inverted,
                "is_inches": is_inches,
                "is_modifier": is_modifier,
                "is_target": is_target,
            },
        )

        # If it already existed, update the flags to ensure they're correct
        if not created:
            updated = False
            if content_stat.is_inverted != is_inverted:
                content_stat.is_inverted = is_inverted
                updated = True
            if content_stat.is_inches != is_inches:
                content_stat.is_inches = is_inches
                updated = True
            if content_stat.is_modifier != is_modifier:
                content_stat.is_modifier = is_modifier
                updated = True
            if content_stat.is_target != is_target:
                content_stat.is_target = is_target
                updated = True

            if updated:
                content_stat.save()


def reverse_contentstat_entries(apps, schema_editor):
    """
    This is a data migration, so we don't delete the ContentStat entries on reverse.
    They may have been created by other means or have relationships.
    """
    pass


class Migration(migrations.Migration):
    dependencies = [
        ("content", "0147_add_stat_configuration_fields"),
    ]

    operations = [
        migrations.RunPython(
            ensure_contentstat_entries,
            reverse_contentstat_entries,
        ),
    ]
